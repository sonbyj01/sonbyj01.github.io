<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Henry J. Son</title>
 <link href="http://localhost:4000/feed.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2020-08-12T18:48:29-04:00</updated>
 <id>http://localhost:4000/</id>
 <author>
   <name>Henry J. Son</name>
   <email>sonbyj01@gmail.com</email>
 </author>

 
 <entry>
   <title>Automating web scrapper - Wunderground</title>
   <link href="http://localhost:4000/Automate-web-scrapping-weather/"/>
   <updated>2020-05-23T20:00:00-04:00</updated>
   <id>http://localhost:4000/Automate-web-scrapping-weather</id>
   <content type="html">&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sonbyj01/weather_scrapper&quot;&gt;Github Repository&lt;/a&gt; – &lt;a href=&quot;https://public.sonbyj01.xyz/projects/weather_scrapping/temp-plot.html&quot;&gt;Sample Graph&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So as it turns out, we’re not in China and there are actually copyright laws that I have to abide by! Who would’ve known?&lt;/p&gt;

&lt;p&gt;All jokes aside (for the most part), if you saw my previous blog at one point, you might have noticed that I took it down. (If you haven’t seen it, 
disregard everything I’ve said up to this part, besides the part about China and copyright laws. After a good friend of mine strongly suggested that 
I take it down and implement the webscrapper on something else, I decided to write one for scrapping weather data!&lt;/p&gt;

&lt;p&gt;Now I may write about the underlying motivation for this specifically but we’ll just have to see…&lt;/p&gt;

&lt;p&gt;Oh, and this would also be a great opportunity for me to try out &lt;a href=&quot;https://plotly.com/&quot;&gt;Plotly&lt;/a&gt;! Just because it looks pretty damn cool compared to good ol’ matlibplot.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;part-1-webscrapping-wunderground&quot;&gt;Part 1: Webscrapping Wunderground&lt;/h1&gt;

&lt;p&gt;So for those who don’t know what webscrapping is, it’s essentially scrapping things from the web…&lt;/p&gt;

&lt;p&gt;woaHHHHH really?! I didn’t know that! Alright no need for your sarcastic comments.&lt;/p&gt;

&lt;p&gt;Webscrapping is simply the process of extracting information from a website by looking at elements in the source code (HTML)&lt;/p&gt;

&lt;p&gt;or at least that’s how I’m implementing this program…&lt;/p&gt;

&lt;p&gt;Alright cool, so how do I get started? Well the first step you should take is pick a website that you want to extract some data from. In my case, that will be 
&lt;a href=&quot;https://www.wunderground.com/&quot;&gt;Wunderground&lt;/a&gt;, and more specifically the weather for Manhasset (just chosen out of random, absolutely coincidental…). Make note of that URL, so in my case it
will be: &lt;a href=&quot;https://www.wunderground.com/weather/us/ny/manhasset/11030&quot;&gt;https://www.wunderground.com/weather/us/ny/manhasset/11030&lt;/a&gt;. Now technically I can script 
my program so it can send a POST request for the location that I want from the homepage of &lt;a href=&quot;https://www.wunderground.com/&quot;&gt;Wunderground&lt;/a&gt; but I’m lazy so I’m just going to hard code the URL.&lt;/p&gt;

&lt;p&gt;Now when you go to this url, you should see something like these photos.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-05-24-Automate-web-scrapping-weather/wunderground_first.PNG&quot; alt=&quot;first&quot; /&gt;
&lt;img src=&quot;/assets/images/2020-05-24-Automate-web-scrapping-weather/wunderground_second.PNG&quot; alt=&quot;second&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Okay cool cool cool, so now after roaming through the webpage, I’ve locked my focus on specific values that I want to pull: the temperature in the middle of the 
circle on top and most of the data from the ‘ADDITIONAL CONDITIONS’ section. With that in mind, I’m going to ‘Inspect Elements’ and find those values in the HTML 
code. From here, I can find unique attributes within the code, which is basically the driving force of this script.&lt;/p&gt;

&lt;p&gt;For all intents and purposes (and out of sheer laziness), I will only follow through with finding and pulling the temperature. But hey! Think about it this way: 
I’m giving you an exercise for you to practice this on your own! And don’t worry, I’ll be posting my code as well just in case you’re in a rush to figure something out.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-05-24-Automate-web-scrapping-weather/wunderground_inspect_element.PNG&quot; alt=&quot;third&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Awesome, so as you can see in the image above, the 60 that represents the temperature is tagged with ‘span’ and uses the class ‘wu-value wu-value-to’.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wu-value wu-value-to&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;_ngcontent-app-root-c122=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;60&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Noice! That means when I run my webscrapper, I should be searching for the tag ‘span’ with class value of ‘wu-value wu-value-to’. Alrighty then, let’s jump into the code!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So the first thing I have to do is make a request to the url that contains the data that I want. Afterwards, I’m going to use BeautifulSoup to make the requested url 
into a usable and readable form.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://www.wunderground.com/weather/us/ny/manhasset/11030&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'html.parser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now I need to actually find the data that I’m looking for in order to pull the correct data value. As I said before, the elements I probably should be looking for are 
‘span’ and ‘wu-value wu-value-to’. Therefore, I will use the ‘find’ function to specify which elements/tags/stuff I am looking for. I will then print out what is has 
found so I can see if the data I want is part of the results. After printing the ‘temperature_results’, I quickly noticed that the first element of the array contains 
the temperature that I want, so I store the zeroth index into ‘temperature’. (If you thought it would be 1, this ain’t for you because this ain’t matlab bud; 
matlab is the wack one for indexing arrays at 1).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;temperature_results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'span'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wu-value wu-value-to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temperature_results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Anddd boom! Now I have successfully taken the temperature data from Wunderground! Just repeat the same process with the other data that you want to extract. However, I 
will make a note that for the other ones, you may need to do ‘.contents’ twice… Just sayin’ man…&lt;/p&gt;

&lt;p&gt;And another note, I would highly recommend writing this program using Juypter notebook first because it will enable you to run sections of your code quickly, instead of 
making new request each time you run the entire program again. If you don’t have access to Juypter notebook from school or something, I would suggest using &lt;a href=&quot;https://colab.research.google.com/notebooks/intro.ipynb&quot;&gt;Colab Research 
from Google&lt;/a&gt;. (Not sponsored by Google, not important enough…) I originally wrote this script using Colab Research but then moved all my code into regular python 
because I wanted to run this as a executable script (as you can see with my SHEBANG at the top).&lt;/p&gt;

&lt;p&gt;Now there are a bunch of other lines of code that I included in my scrapper.py program and those are mostly for me and my purposes, but I’m sure you can figure out what I’m 
doing anyways:)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;old_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_pickle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./weather_data.pickle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;FileNotFoundError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;old_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I wanted to have one pickle file that stores all the data that the scrapper collects each time it runs. I used specifically pickle because (1) there was already a built-in 
function to read and dump to pickle from pandas and (2) it would preserve all the metadata that I dump and read. Now the reason why I used pandas is because I wanted to be 
one of those kool kids in data science that use pandas #swag. In here, I check if there’s already an existing pickle file. If there is, then I want to load those old data 
values because I will eventually append the new data onto the old data. If not, then just initialize a new data frame.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# gets current date and time
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Day'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Month'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hour'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;H'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Minute'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;M'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because in the end I want to graph the data that I collected with respect to time, I stored the current time and date into a dictionary of data that would eventually 
be appended to a data frame (ooooHHH pandas, am I kool kid yet?).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# sees if there's previous data and append, otherwise move on
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;old_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# print('empty')
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;old_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# print('not empty')
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# stores into pickle file
# print(old_data)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_pickle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./weather_data.pickle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You know thinking about it, I thought I wrote nice and short commments that described what I was doing but screw it, I already made it this far. So now that I have 
a dictionary that contains all the weather data, date, and time, I finally convert it to a data frame. I then see if there’s already data within the previous data frame; 
if so, then append, if not, then reassign. And finally, send the entire data back to the pickle file.&lt;/p&gt;

&lt;p&gt;And there you have it! That’s Webscrapping 101!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;part-2-automating-webscrapper-script&quot;&gt;Part 2: Automating webscrapper script&lt;/h1&gt;

&lt;p&gt;Now I have a small little desktop that’s acting as my ‘server’ (I only call it that because I never shut it down). It currently runs CentOS… 7? 8? 9? 10? Eh, at least I 
remember how to count. Anywho, my plan was to run this script every 15 minutes so I can collect data at that interval. So to go about this, I decided to just use the default 
cron utility. However, one of the good practices that I’ve learned over the years is to create virtual environments for my python projects, instead of installing them directly 
to the global directory. The issue is that I don’t know how to activate the virtual environment and then run my script and then turn it back off… Unless I create a bash script!&lt;/p&gt;

&lt;p&gt;So that’s exactly what I did. Essentially in this bash script, I am turning on the virtual environment that contains the installed packages needed for the program, I run the program, 
and then I turn off the virtual environment. And this all happens every 15 minutes! Now I will let the record show that I was running into an issue where if I ran the script with its 
absolute path, it won’t actually allow the program to save the pickle… Wack man… So I instead decided to just change directories into the project folder and run the script 
relatively.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crontab &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# insert -&amp;gt; */15 * * * * /home/helen/projects/weather_scrapper/script.sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now boom, you have a thing collecting weather data every 15 minutes!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;part-3-graphing-collected-data&quot;&gt;Part 3: Graphing collected data&lt;/h1&gt;

&lt;p&gt;By this point, I’ve sort of lost my purpose… I, more or less, just wanted to graph some stuff and play around with Plotly. So, I wrote a separate program called ‘graph.py’ 
that does exactly that! In the program, after opening the pickle, I iterated through each row, appending the date and time (which I string formatted first), temperature, 
dew point, humidity, and rainfall into separate lists because these lists are going to be used as the y-values with respective to the date time. Afterwards, I added each 
individual ‘trace’, or line graph in this case, by stating the x-axis as the date-time string that was formatted beforehand and each y-axis as a different trace.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Temperature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'royalblue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dew_point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Dew Point'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'firebrick'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# etc...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, I got a little bored and decided that I wanted to be able to view the different graphs by adding a drop down menu. After a bit of searching, I used the ‘update’ method 
to update the layout of the graph. The thing to keep in mind is when updating the ‘visible’ list in args. The number of boolean values should be equivalent to the number of 
traces that you added before, within that order as well. For example, if you add a trace that plots date-time vs. temperature and then add another trace that plots date-time 
vs. dew point, then by specifying the ‘visible’ option as [True, True] will plot both graphs while [True, False] will only plot the date-time vs. temperature graph. The graph 
of the data that I’ve collected so far can be viewed &lt;a href=&quot;https://public.sonbyj01.xyz/projects/weather_scrapping/temp-plot.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And there it goes ladies and gentlemen, that’s it!&lt;/p&gt;

&lt;p&gt;If you liked this post, make sure you give it a thumbs up and smash that subscribe butto… Oh wait… Wrong platform…&lt;/p&gt;

&lt;p&gt;Thanks for reading -&lt;/p&gt;

&lt;p&gt;sonbyj01&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How does one use Git</title>
   <link href="http://localhost:4000/How-to-use-Git/"/>
   <updated>2020-04-27T20:00:00-04:00</updated>
   <id>http://localhost:4000/How-to-use-Git</id>
   <content type="html">&lt;hr /&gt;

&lt;p&gt;So you’re sitting at your computer, working on some intense Tic-Tac-Toe code, when all of a sudden the building you’re working on is on fire! What are you going to do? You could ‘quickly’ open up a Firefox tab, type ‘drive.google.com’, locate your program, and then drag-and-drop it into Google Drive.&lt;/p&gt;

&lt;p&gt;Or let’s saying you’re building the next ‘Google’ website because you have trust issues, but you also know you can’t do this alone. How are you and your buddy Gabriel Weinberg going to work on the same code at the same time?&lt;/p&gt;

&lt;p&gt;Oh boy, do I have the perfect candidate for you:&lt;/p&gt;

&lt;p&gt;Introducing… Git!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/git_logo.gif&quot; alt=&quot;GitLogo&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;so-what-is-git&quot;&gt;So what is git?&lt;/h1&gt;
&lt;p&gt;Well if you want the textbook definition, here it is:&lt;/p&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;Git is a distributed version-control system for tracking changes in source code during software development. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;If none of what was said right before this made sense, just key into these specific parts: &lt;em&gt;coordinating work among programmers&lt;/em&gt;, &lt;em&gt;track changes in any set of files&lt;/em&gt;, &lt;em&gt;speed&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;okay-then-what-about-git-commands-whats-that&quot;&gt;Okay, then what about git commands? What’s that?&lt;/h1&gt;
&lt;p&gt;Git commands are essentially that: they’re just commands for git. You can &lt;del&gt;Google&lt;/del&gt; DuckDuckGo search these commands but at least for me, most of them didn’t make sense unless I saw them being applied. So, that’s exactly what I will be doing!&lt;/p&gt;

&lt;h1 id=&quot;setting-up-our-workstation&quot;&gt;Setting up our workstation&lt;/h1&gt;
&lt;p&gt;So before we dive into creating repositories and adding some code, let’s first download &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; and &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; (I recommend installing VS Code first before Git). Git is the application that will be driving this entire tutorial while VS Code is a nice, modern editor that we will use to add and edit code. &lt;strong&gt;Note: When installing Git, if you installed VS Code first, you will then be prompted to choose which text editor you want to use during setup. Make sure you choose VS Code!&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-set-up-github&quot;&gt;How to set up Github&lt;/h1&gt;
&lt;h2 id=&quot;setting-up-an-account&quot;&gt;Setting up an account&lt;/h2&gt;
&lt;p&gt;So more often that not, unless you’re hosting your own Gitlab server &lt;a href=&quot;https://git.sonbyj01.xyz/&quot;&gt;like me&lt;/a&gt;, you’re best bet is to use &lt;a href=&quot;https://github.com/&quot;&gt;Github.com&lt;/a&gt;. It’s free and a lot of people use it!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;so-where-can-i-use-git-then&quot;&gt;So where can I use git then?&lt;/h1&gt;
&lt;p&gt;Well there are some platforms that are readily available for you to use git with, such as Gitlab and Github.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/gitlab.jpg&quot; alt=&quot;GitlabLogo&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/github.png&quot; alt=&quot;GithubLogo&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;create-an-account&quot;&gt;Create an account&lt;/h3&gt;
&lt;p&gt;Go to &lt;a href=&quot;https://github.com/&quot;&gt;Github.com&lt;/a&gt; and click “Sign up”. Fill in each box with its respective information. Remember: the username you pick now will stick with you forever… and ever…&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/signup.PNG&quot; alt=&quot;Signup&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You’ll then be prompted to answer some questions on why you joined Github, afterwhich you’ll then be sent a verification email to the address you gave it before. Once you verify your email, you’ll be greeted with this page:&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/github_main.PNG&quot; alt=&quot;Github_main&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You have successfully created an account!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;setting-up-your-desktoplaptop&quot;&gt;Setting up your desktop/laptop&lt;/h3&gt;
&lt;p&gt;Now the following instructions are for users on Windows. These steps should be fairly similar to those users on Linux and Mac however.&lt;/p&gt;

&lt;p&gt;Okay so now that we’ve created a Github account, we need something else for our computer to communicate with Github, and that’s where &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; comes into play. Now technically speaking, git is already installed on your computer but (hopefully) you’ll see why I like this slightly more. Go ahead and install &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; onto your computer. After you go through the installation and all, you should have ‘Git Bash’ when you search for it; open it.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/gitbash.PNG&quot; alt=&quot;gitbash&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now, the beautiful thing about installing from &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; is that it also installs something called &lt;a href=&quot;http://mingw.org/&quot;&gt;“MinGW”&lt;/a&gt;. This will essentially give you a ‘Unix’ feeling, as in most of the basic commands you type in here will also apply to Linux and Mac. Now let’s start syncing Github with your computer! Type in the following commands. &lt;strong&gt;NOTE:&lt;/strong&gt; if you don’t want to set up SSH with your Github account, you can skip all the instructions regarding SSH. You will instead clone your repository using HTTPS.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;s2&quot;&gt;&quot;H Son&quot;&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;# replace &quot;H Son&quot; with your name&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &lt;span class=&quot;s2&quot;&gt;&quot;testing.sonbyj01@gmail.com&quot;&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# replace &quot;testing.sonbyj01@gmail.com&quot; with your email&lt;/span&gt;
ssh-keygen &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;testing.sonbyj01@gmail.com&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa       &lt;span class=&quot;c&quot;&gt;# replace &quot;testing.sonbyj01@gmail.com&quot; with your email&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# just click enter for each prompt when doing the 'ssh-keygen'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/global_sshkeygen.PNG&quot; alt=&quot;keygen&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Then type in the following command and copy the output.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/sshkey.PNG&quot; alt=&quot;sshkey&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Then go back to &lt;a href=&quot;https://github.com/&quot;&gt;Github.com&lt;/a&gt;. Click on your profile picture, click “Settings” &amp;gt; “SSH and GPG keys” &amp;gt; “New SSH key”.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/settings.PNG&quot; alt=&quot;settings&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Paste the long string that you copied before and add a name to that key.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/addingssh.PNG&quot; alt=&quot;addingssh&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;After you save the ssh key, your “SSH and GPG keys” page should look something like this.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/new_settings.PNG&quot; alt=&quot;new_settings&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Woo! You finally synced your computer and Github! If you’re still having issues, refer to this page on &lt;a href=&quot;https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh&quot;&gt;connecting to Github with SSH&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;how-to-use-github&quot;&gt;How to use Github&lt;/h1&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;creating-your-first-repository&quot;&gt;Creating your first repository&lt;/h3&gt;
&lt;p&gt;Now it’s time to create your first repository! &lt;em&gt;I recommend making a repository on Github and then cloning that to your desktop.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Click on your profile picture &amp;gt; “Your repositories” &amp;gt; “New”. You should be on a page similar to this then.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/create_repo.PNG&quot; alt=&quot;create_repo&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Add a repository name: this will be the name of your ‘project’. You can then either choose ‘Public’ or ‘Private’, initialize a ‘README’, add ‘.gitignore’, and add a ‘license’.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.makeareadme.com/&quot;&gt;README&lt;/a&gt; - this is essentially a way for you to articulate the purpose and how-to-use documentation for your repository&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;.gitignore&lt;/a&gt; - this is a file that is inside your repository and in it contains a list of certain files or folders that should &lt;strong&gt;NOT&lt;/strong&gt; be uploaded to Github when pushing (i.e. virtual environments, IDE preferences, etc.)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://choosealicense.com/&quot;&gt;license&lt;/a&gt; - there are different types of licenses that you can apply to your repository, the more common ones being MIT License and GNU General Public License v3.0.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you’ve created your repository, you’ll be redirected to that repository’s page.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/repo.PNG&quot; alt=&quot;repo&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Click on “Clone or download”, make sure it says “Clone with SSH”, and click the copy button icon right next to the URL. &lt;strong&gt;HOWEVER&lt;/strong&gt;, you can alternatively use HTTPS. When you push later on, you will instead just type in your Github account information.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/clone.PNG&quot; alt=&quot;clone&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Then head back to your MINGW terminal. Now a bit of a side node but here are some &lt;a href=&quot;https://dev.to/awwsmm/101-bash-commands-and-tips-for-beginners-to-experts-30je#pwd-ls-cd&quot;&gt;‘bash commands’&lt;/a&gt; you can use to navigate your way around the terminal.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/bash.PNG&quot; alt=&quot;bash&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now I’m going to clone my repository onto my Desktop.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git clone &amp;lt;repository url (the link you copied before this)&amp;gt; - create a copy of your Github repository to your current location&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Desktop
git clone git@github.com:t35t-4cc0unt/Hello-World.git &lt;span class=&quot;c&quot;&gt;# this is for SSH cloning&lt;/span&gt;
git clone https://github.com/t35t-4cc0unt/Hello-World.git &lt;span class=&quot;c&quot;&gt;# this is for HTTPS cloning&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/cloning_desktop.PNG&quot; alt=&quot;cloning_desktop&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you check on your terminal, you should see your repository name. In my case, it’s ‘Hello-World’.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/successful_clone.PNG&quot; alt=&quot;cloning_desktop&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now enter your repository folder using cd and then open the repository using a code editor (I will be using &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt;). If you haven’t done so already, download the &lt;em&gt;free&lt;/em&gt; program.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Hello-World/
code &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/opening_repo.PNG&quot; alt=&quot;opening_code&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you have VS Code installed, it should have opened with your repository. Now let’s doing something pretty simple. I’m going to edit the README.md file and add a small program to this folder. Once I have done that, I will be updating my repository using terminal again. (Note: you can technically do it from VS code, but I’m not going over that right now.)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;git checkout -b &amp;lt;new_branch&amp;gt; - create a new ‘branch’ on your repository (good practice!) more information on &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging&quot;&gt;branches&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;git add &amp;lt;file/folder(s)&amp;gt; - add file/folder(s) that will be pushed to Github (you can also use * to specify all folders and files in that current directory)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;git reset &amp;lt;file/folder(s)&amp;gt; - ‘resets’ the folders and files that you’ve added; leave blank to undo all ‘adds’ you’ve made&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;git commit -m '&amp;lt;message&amp;gt;' - add a message to Github that should describe the changes you’ve made to the file/folder(s)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;git push origin &amp;lt;new_branch&amp;gt; - push the file/folder(s) you added before from your local git repository (origin) to the remote repository ‘new_branch’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'branch1'&lt;/span&gt;
git add &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;added HelloWorld program and updated README.md&quot;&lt;/span&gt;
git push origin branch1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/push_new.PNG&quot; alt=&quot;push_new&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Woo! Congratulations! You’ve made your first push!&lt;/p&gt;

&lt;p&gt;To check it out, go back to your repository page. Click on where it says “Branch: master” (right next to “New pull request”) and click on the branch you pushed to.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/view_branch1.PNG&quot; alt=&quot;view_branch1&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;And boom, there are the changes you’ve made!&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/done_branch1.PNG&quot; alt=&quot;done_branch1&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;manage-pull-requests&quot;&gt;Manage Pull requests&lt;/h3&gt;
&lt;p&gt;Now notice how there’s a yellow, long box and at the end there’s a green box labeled “Compare &amp;amp; pull request”. Essentially how Github is structured is that there is a ‘master’ branch that should be working and have the final iteration of changes. It’s the ‘master’ branch for a reason… Now if you want to make some edits to your code, you would branch off of the master and make edits there. That’s what we did before when we did ‘git checkout -b branch1’. Now, if you’re happy with the edits and changes you’ve made to your code, you can then ‘merge’ your branch and the master branch, leaving the master branch updated with content from said branch. This is what the “Compare &amp;amp; pull request” is allowing you to do.&lt;/p&gt;

&lt;p&gt;So, click on “Compare &amp;amp; pull request”&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/compare_pull1.PNG&quot; alt=&quot;compare_pull1&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In this upper section, you can see the commit message that you wrote previously when pushing. If you’re happy with the edits, click “Create pull request” &amp;gt; then “Merge pull request” &amp;gt; then “Confirm merge”. If you scroll down further, you can also see the specific changes that will be made to your files in the master branch.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/compare_pull2.PNG&quot; alt=&quot;compare_pull2&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you also want, on the right side, there’s an option to pick either ‘Unified’ or ‘Split’. The split option looks like the one below.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/compare_pull3.PNG&quot; alt=&quot;compare_pull3&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now that you completed the merge request, go back to your repository page and under the master branch you should see your file edits/changes.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;updating-your-local-repository-from-remote-repository&quot;&gt;Updating your local repository from remote repository&lt;/h3&gt;
&lt;p&gt;So you and your buddy are working on the same branch&lt;/p&gt;

&lt;h3 id=&quot;end-of-day-sequence&quot;&gt;End of Day Sequence&lt;/h3&gt;
&lt;p&gt;Now let’s say you’ve been working the entire day, just cranking out code left and right from *cough stackoverflow and your innovative mind, and it’s time to pack up and head back home. Your ‘end-of-day’ protocol should look something a little like this.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;git checkout &amp;lt;existing_branch&amp;gt; - switch to an existing branch&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout branch1
git add &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;added install script&quot;&lt;/span&gt;
git push origin branch1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/end-of-day.PNG&quot; alt=&quot;end-of-day&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I hope this was a resourceful guide on how to use git. And remember,&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-04-28-How-to_use-Git/git_meme.png&quot; alt=&quot;git_meme&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks for reading -&lt;/p&gt;

&lt;p&gt;sonbyj01&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Hello World</title>
   <link href="http://localhost:4000/Hello-World/"/>
   <updated>2020-04-15T20:00:00-04:00</updated>
   <id>http://localhost:4000/Hello-World</id>
   <content type="html">&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=w9uWPBDHEKE&quot;&gt;What’s poppin?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is my first blog post! But I don’t know what to really talk about quite yet. I’m just seeing how this works because I am fairly new to jekyll and etc.&lt;/p&gt;

&lt;p&gt;*I am currently playing around with different themes right now but I think I’m settling with &lt;a href=&quot;https://noir.essentialenemy.com/&quot;&gt;this one by Victor Johnson&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 

</feed>
